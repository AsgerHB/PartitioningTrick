<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/* Simulation-specific stuff */
urgent broadcast chan bounce;
broadcast chan hit;
clock time;
clock p, v;
double reward = 0.0;
double number_deaths = 0;

// helper structure for holding pointers
typedef struct {
    int32_t l;
    int32_t h;
    
} ptr_t;

// allows us to get values from ENV, makes scripting experiments easier
import "libc.so.6" {
    ptr_t getenv(const string&amp; s);
    int atoi(ptr_t ptr);
};

/**
*** Gridification 
**/

// PARAM: The state space is partitioned into uniformly sized squares of size GRID_P*GRID_V. 
// Partitions are addressed by their index for each axis. Since the state space is bounded there is only a finite amount of partitions.
double GRID_P = 0.1;
double GRID_V = 0.1;
bool SAMPLED_COST = false;



// PARAM: Whether to pick a completely random initial location for v and p. Otherwise, pick v = 0, p in [7; 10]
bool randomizeInitial = false;

// PARAM: Possible initial state when randomizing completely
const double v_min = -15;
const double v_max = 15;
const double p_max = 15;
const double p_min = 0;

// Indices of the partition which contain v and p.
int iv, ip;

// The lower bound for v and the lower bound for p. The upper bound is vl + G etc.
double vl, vu, pl, pu;

// agents for picking successor in each dimension; -1=lower, 0=mid, 1=upper, 2=uniform, 3=memoryfull
int AGENT_V = 2;
int AGENT_P = 2;

// Change v and p to some random value sampled uniformly from within their partition 
void gridify()
{
    iv = fint(floor(v/GRID_V));
    ip = fint(floor(p/GRID_P));

    vl = iv*GRID_V;
    vu = vl + GRID_V;
    pl = ip*GRID_P;
    pu = pl + GRID_P;

    if(AGENT_V == 2)       v = vl + random(GRID_V);
    else if(AGENT_V == -1) v = vl;
    else if(AGENT_V ==  1) v = vu;
    else if(AGENT_V ==  0) v = (vl + vu) / 2.0;
    else if(AGENT_V == -2)
    {
        if(vl &lt;= 0 &amp;&amp; vu &gt;= 0) {
            v = 0;
        }
        else if(fabs(vl) &gt; fabs(vu))
        {
            v = vu;
        }
        else v = vl;
    }
    else if(AGENT_V == -3)
    {
        if(fabs(vl) &gt;= fabs(vu))
            v = vl;
        else
            v = vu;
    }
    
    // else fallthrough    
    if(AGENT_P == 2)       p = pl + random(GRID_P);
    else if(AGENT_P == -1) p = pl;
    else if(AGENT_P ==  1) p = pu;
    else if(AGENT_P ==  0) p = (pl + pu) / 2.0;
    // else fallthrough  
}

double partition_cost() {
    double iv, ip, vl, vu, pl, pu;
    iv = fint(floor(v/GRID_V));
    ip = fint(floor(p/GRID_P));

    vl = iv*GRID_V;
    vu = vl + GRID_V;
    pl = ip*GRID_P;
    pu = pl + GRID_P;
    if(SAMPLED_COST)
        return p;
    if(AGENT_P == -1 || AGENT_P == -2)
        return pl;
    if(AGENT_P == 1 || AGENT_P == -3)
        return pu;
    return (pl + pu) / 2.0;
}


void initialize()
{
    ptr_t env = getenv("GRID_P");
    if(env.l || env.h)
        GRID_P = (p_max - p_min) / atoi(env);
    env = getenv("GRID_V");
    if(env.l || env.h)
        GRID_V = (v_max - v_min) / atoi(env);
    env = getenv("AGENT_V");
    if(env.l || env.h)
        AGENT_V = atoi(env);
    env = getenv("AGENT_P");
    if(env.l || env.h)
        AGENT_P = atoi(env);

    env = getenv("SAMPLED_COST");
    if(env.l || env.h)
        SAMPLED_COST = atoi(env);
                
    env = getenv("RANDOM_INITIAL");
    if(env.l || env.h)
        randomizeInitial = atoi(env);
    if (randomizeInitial)
    {
        v = v_min + random(v_min + v_max);
        p = random(p_max);
    } 
    else
    {
        v = 0;
        p = 3 + random(7.0);
    }
    gridify();
}
</declaration>
	<template>
		<name x="5" y="5">Ball</name>
		<declaration>// Place local declarations here.
</declaration>
		<location id="id0" x="297" y="-34">
			<name x="314" y="42">Location2</name>
			<label kind="invariant" x="204" y="-102">v' == -9.81 &amp;&amp;
p' == v</label>
			<label kind="exponentialrate" x="289" y="-25">1</label>
		</location>
		<location id="id1" x="-110" y="-34">
			<name x="-120" y="-68">Location1</name>
			<urgent/>
		</location>
		<location id="id2" x="-110" y="246">
			<name x="-119" y="263">Location3</name>
			<committed/>
		</location>
		<init ref="id1"/>
		<transition id="id3" controllable="false">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-102" y="68">v &lt;= 1</label>
			<label kind="assignment" x="-102" y="85">number_deaths = 
	number_deaths + 1, 
v=0, p=0</label>
		</transition>
		<transition id="id4" controllable="false">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="68" y="85">v&gt;1</label>
		</transition>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="467" y="-108">p &gt;= 4 &amp;&amp; v &gt;= 0</label>
			<label kind="synchronisation" x="467" y="-92">hit?</label>
			<label kind="assignment" x="467" y="-76">v = -4 - (0.95 - 0.05 + random(2*0.05))*v</label>
			<nail x="459" y="-110"/>
			<nail x="459" y="-34"/>
		</transition>
		<transition id="id6">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="467" y="10">p &gt;= 4 &amp;&amp; v &gt;= -4 &amp;&amp; v &lt; 0</label>
			<label kind="synchronisation" x="467" y="26">hit?</label>
			<label kind="assignment" x="467" y="42">v = -4.0</label>
			<nail x="459" y="85"/>
			<nail x="459" y="10"/>
		</transition>
		<transition id="id7" controllable="false">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="34" y="204">p &lt;= 0 &amp;&amp; v &lt;= 0</label>
			<label kind="synchronisation" x="68" y="187">bounce!</label>
			<label kind="assignment" x="-68" y="221">v = -(0.91 - 0.06 + random(2*0.06))*v, p = 0</label>
			<nail x="297" y="246"/>
		</transition>
		<transition id="id8" controllable="false">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="assignment" x="-25" y="-25">initialize()</label>
		</transition>
	</template>
	<template>
		<name>LearnerPlayer</name>
		<declaration>clock x;
int fired;</declaration>
		<location id="id9" x="0" y="-136">
			<label kind="invariant" x="17" y="-161">x &lt;= 1 &amp;&amp;
x' == 10</label>
		</location>
		<location id="id10" x="0" y="-272">
			<committed/>
		</location>
		<location id="id11" x="0" y="-17">
			<committed/>
		</location>
		<init ref="id9"/>
		<transition id="id12" controllable="false">
			<source ref="id11"/>
			<target ref="id9"/>
			<label kind="assignment" x="8" y="-51">gridify()</label>
		</transition>
		<transition id="id13">
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="assignment" x="-195" y="-348">reward = reward + 10.0
// abstaining from hitting 
// yeilds 10 reward;</label>
			<nail x="-76" y="-272"/>
			<nail x="-76" y="-17"/>
		</transition>
		<transition id="id14">
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="136" y="-272">hit!</label>
			<label kind="assignment" x="136" y="-255">++fired</label>
			<nail x="127" y="-272"/>
			<nail x="127" y="-17"/>
		</transition>
		<transition id="id15" controllable="false">
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="guard" x="8" y="-246">x &gt;= 1</label>
			<label kind="assignment" x="8" y="-229">x = 0,
reward = 
   reward + partition_cost()</label>
		</transition>
	</template>
	<system>system Ball, LearnerPlayer;</system>
	<queries>
		<option key="--total-runs" value="1000"/>
		<option key="--max-iterations" value="1"/>
		<option key="--good-runs" value="1000"/>
		<option key="--eval-runs" value="1000"/>
		<option key="--max-reset-learning" value="1"/>
		<option key="--runs-pr-state" value="1000"/>
		<query>
			<formula>strategy S = maxE (reward) [&lt;=120] {floor(v/GRID_V)*GRID_V, floor(p/GRID_P)*GRID_P} -&gt; {}: &lt;&gt; time &gt;= 120</formula>
			<comment>3 minutes</comment>
		</query>
		<query>
			<formula>E[&lt;=120;1000] (max:LearnerPlayer.fired) under S</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=120;1000] (max:number_deaths) under S</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=120;1000] (max:reward) under S</formula>
			<comment/>
		</query>
		<query>
			<formula>saveStrategy("strat.json", S)</formula>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
