<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.5//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_5.dtd'>
<nta>
	<declaration>// Place global declarations here.
broadcast chan fast, slow;

clock cl;

double x=0.0,t=0.0;

int counterSlow, counterFast;


void updateFast()
{
    if (x&lt;=1 and t &lt;=1)
    {
        x = x + 0.3 - 0.1 + random(0.2); 
        t = t + 0.1 - 0.1 + random(0.2);    
    }
}


void updateSlow()
{
    if (x&lt;=1 and t &lt;=1)
    {
        x = x + 0.15 - 0.1 + random(0.2); 
        t = t + 0.2 - 0.1 + random(0.2);    
    }
}

/**
Gridification */

// The state space is partitioned into uniformly sized squares of size G*G. 
// Partitions are addressed by their index for each axis. Since the state space is bounded there is only a finite amount of partitions.
const double G = 0.05;

const bool randomize = true;


// Indices of the partition which contain x and t.
int ix, it;

// The lower bound for x and the lower bound for t. The upper bound is xl + G etc.
double xl, xu, tl, tu;

// Change x and t to some random value sampled uniformly from within their partition 
void gridify()
{
    ix = fint(x/G);
    it = fint(t/G);

    xl = ix*G;
    xu = xl + G;
    tl = it*G;
    tu = tl + G;

    if (randomize)
    {
        x = xl + random(G);
        t = tl + random(G);
    }
}
</declaration>
	<template>
		<name x="5" y="5">Template</name>
		<declaration>// Place local declarations here.
</declaration>
		<location id="id0" x="0" y="161">
			<committed/>
		</location>
		<location id="id1" x="0" y="263">
			<committed/>
		</location>
		<init ref="id0"/>
		<transition id="id2" controllable="false">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="assignment" x="-42" y="187">gridify()</label>
		</transition>
		<transition id="id3">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-204" y="-17">slow!</label>
			<label kind="assignment" x="-382" y="0">updateSlow(), counterSlow++</label>
			<nail x="-153" y="-93"/>
			<nail x="-153" y="59"/>
		</transition>
		<transition id="id4">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="170" y="-25">fast!</label>
			<label kind="assignment" x="170" y="0">updateFast(), counterFast ++</label>
			<nail x="153" y="-76"/>
			<nail x="153" y="51"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = Template();
// List one or more processes to be composed into a system.
system Process;
</system>
	<queries>
		<option key="--total-runs" value="100000"/>
		<option key="--max-iterations" value="1"/>
		<option key="--good-runs" value="100000"/>
		<option key="--eval-runs" value="100000"/>
		<option key="--runs-pr-state" value="100000"/>
		<query>
			<formula>strategy GoFast = minE ((t&gt;=1.0)*15.0 + counterSlow + counterFast*3) [#&lt;=20] { ix, it } -&gt; {  } : &lt;&gt; x&gt;=1 or t&gt;=1</formula>
			<comment/>
		</query>
		<query>
			<formula>Pr[#&lt;=20](&lt;&gt; x&gt;=1) under GoFast</formula>
			<comment/>
		</query>
		<query>
			<formula>Pr[#&lt;=20](&lt;&gt; x&gt;=1) </formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [#&lt;=20;100] { x, t }</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [#&lt;=20;100] { x, t } under GoFast</formula>
			<comment/>
		</query>
		<query>
			<formula>saveStrategy("/home/asger/PartitionedSemiRandomWalk.strattegy.json",GoFast)
	    </formula>
			<comment/>
		</query>
		<query>
			<formula>E[#&lt;=20;100] (max: (t&gt;=1.0)*15.0 + counterSlow + counterFast*3) under GoFast</formula>
			<comment/>
		</query>
		<query>
			<formula>E[#&lt;=20;100] (max: (t&gt;=1.0)*15.0 + counterSlow + counterFast*3)</formula>
			<comment/>
		</query>
	</queries>
</nta>
